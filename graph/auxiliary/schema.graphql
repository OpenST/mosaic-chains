type StateRootAvailable @entity {
  id: ID!
  _blockHeight: BigInt! # uint256
  _stateRoot: Bytes! # bytes32
  blockNumber: BigInt! # uint256
  blockHash: Bytes! # bytes32
  contractAddress: Bytes! # address
  uts: BigInt! # uint256
}

type StakeIntentConfirmed @entity {
  id: ID!
  _messageHash: Bytes! # bytes32
  _staker: Bytes! # address
  _stakerNonce: BigInt! # uint256
  _beneficiary: Bytes! # address
  _amount: BigInt! # uint256
  _blockHeight: BigInt! # uint256
  _hashLock: Bytes! # bytes32
  blockNumber: BigInt! # uint256
  blockHash: Bytes! # bytes32
  contractAddress: Bytes! # address
  uts: BigInt! # uint256
}

type MintProgressed @entity {
  id: ID!
  _messageHash: Bytes! # bytes32
  _staker: Bytes! # address
  _beneficiary: Bytes! # address
  _stakeAmount: BigInt! # uint256
  _mintedAmount: BigInt! # uint256
  _rewardAmount: BigInt! # uint256
  _proofProgress: Boolean! # bool
  _unlockSecret: Bytes! # bytes32
  blockNumber: BigInt! # uint256
  blockHash: Bytes! # bytes32
  contractAddress: Bytes! # address
  uts: BigInt! # uint256
}

type RevertStakeIntentConfirmed @entity {
  id: ID!
  _messageHash: Bytes! # bytes32
  _staker: Bytes! # address
  _stakerNonce: BigInt! # uint256
  _amount: BigInt! # uint256
  blockNumber: BigInt! # uint256
  blockHash: Bytes! # bytes32
  contractAddress: Bytes! # address
  uts: BigInt! # uint256
}

type RevertStakeProgressed @entity {
  id: ID!
  _messageHash: Bytes! # bytes32
  _staker: Bytes! # address
  _stakerNonce: BigInt! # uint256
  _amount: BigInt! # uint256
  blockNumber: BigInt! # uint256
  blockHash: Bytes! # bytes32
  contractAddress: Bytes! # address
  uts: BigInt! # uint256
}

type RedeemIntentDeclared @entity {
  id: ID!
  _messageHash: Bytes! # bytes32
  _redeemer: Bytes! # address
  _redeemerNonce: BigInt! # uint256
  _beneficiary: Bytes! # address
  _amount: BigInt! # uint256
  blockNumber: BigInt! # uint256
  blockHash: Bytes! # bytes32
  contractAddress: Bytes! # address
  uts: BigInt! # uint256
}

type RedeemProgressed @entity {
  id: ID!
  _messageHash: Bytes! # bytes32
  _redeemer: Bytes! # address
  _redeemerNonce: BigInt! # uint256
  _amount: BigInt! # uint256
  _proofProgress: Boolean! # bool
  _unlockSecret: Bytes! # bytes32
  blockNumber: BigInt! # uint256
  blockHash: Bytes! # bytes32
  contractAddress: Bytes! # address
  uts: BigInt! # uint256
}

type RevertRedeemDeclared @entity {
  id: ID!
  _messageHash: Bytes! # bytes32
  _redeemer: Bytes! # address
  _redeemerNonce: BigInt! # uint256
  _amount: BigInt! # uint256
  blockNumber: BigInt! # uint256
  blockHash: Bytes! # bytes32
  contractAddress: Bytes! # address
  uts: BigInt! # uint256
}

type RedeemReverted @entity {
  id: ID!
  _messageHash: Bytes! # bytes32
  _redeemer: Bytes! # address
  _redeemerNonce: BigInt! # uint256
  _amount: BigInt! # uint256
  blockNumber: BigInt! # uint256
  blockHash: Bytes! # bytes32
  contractAddress: Bytes! # address
  uts: BigInt! # uint256
}

type GatewayProven @entity {
  id: ID!
  _gateway: Bytes! # address
  _blockHeight: BigInt! # uint256
  _storageRoot: Bytes! # bytes32
  _wasAlreadyProved: Boolean! # bool
  blockNumber: BigInt! # uint256
  blockHash: Bytes! # bytes32
  contractAddress: Bytes! # address
  uts: BigInt! # uint256
}

type BountyChangeInitiated @entity {
  id: ID!
  _currentBounty: BigInt! # uint256
  _proposedBounty: BigInt! # uint256
  _unlockHeight: BigInt! # uint256
  blockNumber: BigInt! # uint256
  blockHash: Bytes! # bytes32
  contractAddress: Bytes! # address
  uts: BigInt! # uint256
}

type BountyChangeConfirmed @entity {
  id: ID!
  _currentBounty: BigInt! # uint256
  _changedBounty: BigInt! # uint256
  blockNumber: BigInt! # uint256
  blockHash: Bytes! # bytes32
  contractAddress: Bytes! # address
  uts: BigInt! # uint256
}

type RedeemRequested @entity {
  id: ID!
  amount: BigInt! # uint256
  beneficiary: Bytes! # address
  gasPrice: BigInt! # uint256
  gasLimit: BigInt! # uint256
  nonce: BigInt! # uint256
  redeemer: Bytes! # address
  redeemerProxy: Bytes! # address
  cogateway: Bytes! # address
  redeemRequestHash: Bytes! # bytes32
}

type RedeemRevoked @entity {
  id: ID!
  redeemer: Bytes! # address
  redeemRequestHash: Bytes! # bytes32
}

type RedeemRejected @entity {
  id: ID!
  redeemer: Bytes! # address
  redeemRequestHash: Bytes! # bytes32
}
